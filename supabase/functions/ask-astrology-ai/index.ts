
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Ask Astrology AI function called');
    
    // Validate API key
    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY environment variable is not set');
      return new Response(
        JSON.stringify({ error: 'OpenAI API key not configured' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }
    
    console.log('OpenAI API key is present:', openAIApiKey ? 'Yes' : 'No');
    console.log('API key length:', openAIApiKey ? openAIApiKey.length : 0);
    console.log('API key starts with sk-:', openAIApiKey ? openAIApiKey.startsWith('sk-') : false);

    const { question, zodiacSign } = await req.json();
    console.log('Request payload:', { question: question ? 'Present' : 'Missing', zodiacSign });

    if (!question) {
      return new Response(
        JSON.stringify({ error: 'Question is required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      );
    }

    const systemMessage = `You are a knowledgeable and compassionate astrologer. 
    Provide insightful, personalized astrological guidance based on the user's question. 
    ${zodiacSign ? `The user's zodiac sign is ${zodiacSign}, so tailor your response accordingly.` : ''}
    Keep responses helpful, positive, and grounded in astrological wisdom. 
    Limit responses to 150-200 words. Be warm and encouraging in your tone.`;

    console.log('Making request to OpenAI API...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemMessage },
          { role: 'user', content: question }
        ],
        max_tokens: 250,
        temperature: 0.7,
      }),
    });

    console.log('OpenAI API response status:', response.status);
    console.log('OpenAI API response ok:', response.ok);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error response:', errorText);
      console.error('Response status:', response.status);
      console.error('Response headers:', Object.fromEntries(response.headers.entries()));
      
      return new Response(
        JSON.stringify({ 
          error: 'Failed to get AI response',
          details: `OpenAI API returned ${response.status}: ${errorText}`
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }

    const data = await response.json();
    console.log('OpenAI API response data keys:', Object.keys(data));
    console.log('Choices array length:', data.choices ? data.choices.length : 0);

    if (!data.choices || data.choices.length === 0) {
      console.error('No choices returned from OpenAI API');
      return new Response(
        JSON.stringify({ error: 'No response generated by AI' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      );
    }

    const aiResponse = data.choices[0].message.content;
    console.log('AI response length:', aiResponse ? aiResponse.length : 0);

    return new Response(
      JSON.stringify({ response: aiResponse }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Error in ask-astrology-ai function:', error);
    console.error('Error name:', error.name);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    return new Response(
      JSON.stringify({ 
        error: 'Failed to get AI response',
        details: error.message
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    );
  }
});
